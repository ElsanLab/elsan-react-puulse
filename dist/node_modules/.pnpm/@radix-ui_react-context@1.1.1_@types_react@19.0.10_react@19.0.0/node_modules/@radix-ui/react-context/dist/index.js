var $ = Object.defineProperty;
var o = (t, r) => $(t, "name", { value: r, configurable: !0 });
import * as i from "react";
import { jsx as P } from "react/jsx-runtime";
function M(t, r) {
  const c = i.createContext(r), d = /* @__PURE__ */ o((s) => {
    const { children: e, ...n } = s, u = i.useMemo(() => n, Object.values(n));
    return /* @__PURE__ */ P(c.Provider, { value: u, children: e });
  }, "Provider");
  d.displayName = t + "Provider";
  function x(s) {
    const e = i.useContext(c);
    if (e) return e;
    if (r !== void 0) return r;
    throw new Error(`\`${s}\` must be used within \`${t}\``);
  }
  return o(x, "useContext2"), [d, x];
}
o(M, "createContext2");
function j(t, r = []) {
  let c = [];
  function d(s, e) {
    const n = i.createContext(e), u = c.length;
    c = [...c, e];
    const v = /* @__PURE__ */ o((m) => {
      var h;
      const { scope: a, children: f, ...p } = m, C = ((h = a == null ? void 0 : a[t]) == null ? void 0 : h[u]) || n, l = i.useMemo(() => p, Object.values(p));
      return /* @__PURE__ */ P(C.Provider, { value: l, children: f });
    }, "Provider");
    v.displayName = s + "Provider";
    function S(m, a) {
      var C;
      const f = ((C = a == null ? void 0 : a[t]) == null ? void 0 : C[u]) || n, p = i.useContext(f);
      if (p) return p;
      if (e !== void 0) return e;
      throw new Error(`\`${m}\` must be used within \`${s}\``);
    }
    return o(S, "useContext2"), [v, S];
  }
  o(d, "createContext3");
  const x = /* @__PURE__ */ o(() => {
    const s = c.map((e) => i.createContext(e));
    return /* @__PURE__ */ o(function(n) {
      const u = (n == null ? void 0 : n[t]) || s;
      return i.useMemo(
        () => ({ [`__scope${t}`]: { ...n, [t]: u } }),
        [n, u]
      );
    }, "useScope");
  }, "createScope");
  return x.scopeName = t, [d, w(x, ...r)];
}
o(j, "createContextScope");
function w(...t) {
  const r = t[0];
  if (t.length === 1) return r;
  const c = /* @__PURE__ */ o(() => {
    const d = t.map((x) => ({
      useScope: x(),
      scopeName: x.scopeName
    }));
    return /* @__PURE__ */ o(function(s) {
      const e = d.reduce((n, { useScope: u, scopeName: v }) => {
        const m = u(s)[`__scope${v}`];
        return { ...n, ...m };
      }, {});
      return i.useMemo(() => ({ [`__scope${r.scopeName}`]: e }), [e]);
    }, "useComposedScopes");
  }, "createScope");
  return c.scopeName = r.scopeName, c;
}
o(w, "composeContextScopes");
export {
  M as createContext,
  j as createContextScope
};
