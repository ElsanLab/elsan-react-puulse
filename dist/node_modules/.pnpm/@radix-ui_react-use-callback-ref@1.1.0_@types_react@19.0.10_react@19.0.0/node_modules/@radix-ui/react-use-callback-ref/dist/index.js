var s = Object.defineProperty;
var n = (r, e) => s(r, "name", { value: e, configurable: !0 });
import * as t from "react";
function c(r) {
  const e = t.useRef(r);
  return t.useEffect(() => {
    e.current = r;
  }), t.useMemo(() => (...o) => {
    var u;
    return (u = e.current) == null ? void 0 : u.call(e, ...o);
  }, []);
}
n(c, "useCallbackRef");
export {
  c as useCallbackRef
};
