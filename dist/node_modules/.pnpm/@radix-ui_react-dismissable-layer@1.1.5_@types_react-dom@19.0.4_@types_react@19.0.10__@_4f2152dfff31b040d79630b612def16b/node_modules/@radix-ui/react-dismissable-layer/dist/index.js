var U = Object.defineProperty;
var l = (t, e) => U(t, "name", { value: e, configurable: !0 });
import * as r from "react";
import { composeEventHandlers as y } from "../../../../../@radix-ui_primitive@1.1.1/node_modules/@radix-ui/primitive/dist/index.js";
import { Primitive as R, dispatchDiscreteCustomEvent as z } from "../../../../../@radix-ui_react-primitive@2.0.2_@types_react-dom@19.0.4_@types_react@19.0.10__@types_re_eba4716596d4f139c393e6187e0b8922/node_modules/@radix-ui/react-primitive/dist/index.js";
import { useComposedRefs as w } from "../../../../../@radix-ui_react-compose-refs@1.1.1_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-compose-refs/dist/index.js";
import { useCallbackRef as T } from "../../../../../@radix-ui_react-use-callback-ref@1.1.0_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-use-callback-ref/dist/index.js";
import { useEscapeKeydown as H } from "../../../../../@radix-ui_react-use-escape-keydown@1.1.0_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-use-escape-keydown/dist/index.js";
import { jsx as B } from "react/jsx-runtime";
var M = "DismissableLayer", p = "dismissableLayer.update", j = "dismissableLayer.pointerDownOutside", X = "dismissableLayer.focusOutside", O, x = r.createContext({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
}), Y = r.forwardRef(
  (t, e) => {
    const {
      disableOutsidePointerEvents: i = !1,
      onEscapeKeyDown: o,
      onPointerDownOutside: s,
      onFocusOutside: a,
      onInteractOutside: f,
      onDismiss: d,
      ...E
    } = t, c = r.useContext(x), [u, F] = r.useState(null), v = (u == null ? void 0 : u.ownerDocument) ?? (globalThis == null ? void 0 : globalThis.document), [, W] = r.useState({}), A = w(e, (n) => F(n)), b = Array.from(c.layers), [N] = [...c.layersWithOutsidePointerEventsDisabled].slice(-1), I = b.indexOf(N), P = u ? b.indexOf(u) : -1, _ = c.layersWithOutsidePointerEventsDisabled.size > 0, D = P >= I, k = J((n) => {
      const h = n.target, L = [...c.branches].some((m) => m.contains(h));
      !D || L || (s == null || s(n), f == null || f(n), n.defaultPrevented || d == null || d());
    }, v), C = K((n) => {
      const h = n.target;
      [...c.branches].some((m) => m.contains(h)) || (a == null || a(n), f == null || f(n), n.defaultPrevented || d == null || d());
    }, v);
    return H((n) => {
      P === c.layers.size - 1 && (o == null || o(n), !n.defaultPrevented && d && (n.preventDefault(), d()));
    }, v), r.useEffect(() => {
      if (u)
        return i && (c.layersWithOutsidePointerEventsDisabled.size === 0 && (O = v.body.style.pointerEvents, v.body.style.pointerEvents = "none"), c.layersWithOutsidePointerEventsDisabled.add(u)), c.layers.add(u), g(), () => {
          i && c.layersWithOutsidePointerEventsDisabled.size === 1 && (v.body.style.pointerEvents = O);
        };
    }, [u, v, i, c]), r.useEffect(() => () => {
      u && (c.layers.delete(u), c.layersWithOutsidePointerEventsDisabled.delete(u), g());
    }, [u, c]), r.useEffect(() => {
      const n = /* @__PURE__ */ l(() => W({}), "handleUpdate");
      return document.addEventListener(p, n), () => document.removeEventListener(p, n);
    }, []), /* @__PURE__ */ B(
      R.div,
      {
        ...E,
        ref: A,
        style: {
          pointerEvents: _ ? D ? "auto" : "none" : void 0,
          ...t.style
        },
        onFocusCapture: y(t.onFocusCapture, C.onFocusCapture),
        onBlurCapture: y(t.onBlurCapture, C.onBlurCapture),
        onPointerDownCapture: y(
          t.onPointerDownCapture,
          k.onPointerDownCapture
        )
      }
    );
  }
);
Y.displayName = M;
var q = "DismissableLayerBranch", G = r.forwardRef((t, e) => {
  const i = r.useContext(x), o = r.useRef(null), s = w(e, o);
  return r.useEffect(() => {
    const a = o.current;
    if (a)
      return i.branches.add(a), () => {
        i.branches.delete(a);
      };
  }, [i.branches]), /* @__PURE__ */ B(R.div, { ...t, ref: s });
});
G.displayName = q;
function J(t, e = globalThis == null ? void 0 : globalThis.document) {
  const i = T(t), o = r.useRef(!1), s = r.useRef(() => {
  });
  return r.useEffect(() => {
    const a = /* @__PURE__ */ l((d) => {
      if (d.target && !o.current) {
        let E = /* @__PURE__ */ l(function() {
          S(
            j,
            i,
            c,
            { discrete: !0 }
          );
        }, "handleAndDispatchPointerDownOutsideEvent2");
        const c = { originalEvent: d };
        d.pointerType === "touch" ? (e.removeEventListener("click", s.current), s.current = E, e.addEventListener("click", s.current, { once: !0 })) : E();
      } else
        e.removeEventListener("click", s.current);
      o.current = !1;
    }, "handlePointerDown"), f = window.setTimeout(() => {
      e.addEventListener("pointerdown", a);
    }, 0);
    return () => {
      window.clearTimeout(f), e.removeEventListener("pointerdown", a), e.removeEventListener("click", s.current);
    };
  }, [e, i]), {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: /* @__PURE__ */ l(() => o.current = !0, "onPointerDownCapture")
  };
}
l(J, "usePointerDownOutside");
function K(t, e = globalThis == null ? void 0 : globalThis.document) {
  const i = T(t), o = r.useRef(!1);
  return r.useEffect(() => {
    const s = /* @__PURE__ */ l((a) => {
      a.target && !o.current && S(X, i, { originalEvent: a }, {
        discrete: !1
      });
    }, "handleFocus");
    return e.addEventListener("focusin", s), () => e.removeEventListener("focusin", s);
  }, [e, i]), {
    onFocusCapture: /* @__PURE__ */ l(() => o.current = !0, "onFocusCapture"),
    onBlurCapture: /* @__PURE__ */ l(() => o.current = !1, "onBlurCapture")
  };
}
l(K, "useFocusOutside");
function g() {
  const t = new CustomEvent(p);
  document.dispatchEvent(t);
}
l(g, "dispatchUpdate");
function S(t, e, i, { discrete: o }) {
  const s = i.originalEvent.target, a = new CustomEvent(t, { bubbles: !1, cancelable: !0, detail: i });
  e && s.addEventListener(t, e, { once: !0 }), o ? z(s, a) : s.dispatchEvent(a);
}
l(S, "handleAndDispatchCustomEvent");
export {
  Y as DismissableLayer,
  G as DismissableLayerBranch
};
