var d = Object.defineProperty;
var a = (e, r) => d(e, "name", { value: r, configurable: !0 });
import * as l from "react";
import { composeRefs as m } from "../../../../../@radix-ui_react-compose-refs@1.1.1_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-compose-refs/dist/index.js";
import { jsx as f, Fragment as g } from "react/jsx-runtime";
var y = l.forwardRef((e, r) => {
  const { children: n, ...t } = e, o = l.Children.toArray(n), i = o.find(C);
  if (i) {
    const s = i.props.children, c = o.map((u) => u === i ? l.Children.count(s) > 1 ? l.Children.only(null) : l.isValidElement(s) ? s.props.children : null : u);
    return /* @__PURE__ */ f(p, { ...t, ref: r, children: l.isValidElement(s) ? l.cloneElement(s, void 0, c) : null });
  }
  return /* @__PURE__ */ f(p, { ...t, ref: r, children: n });
});
y.displayName = "Slot";
var p = l.forwardRef((e, r) => {
  const { children: n, ...t } = e;
  if (l.isValidElement(n)) {
    const o = R(n), i = E(t, n.props);
    return n.type !== l.Fragment && (i.ref = r ? m(r, o) : o), l.cloneElement(n, i);
  }
  return l.Children.count(n) > 1 ? l.Children.only(null) : null;
});
p.displayName = "SlotClone";
var h = /* @__PURE__ */ a(({ children: e }) => /* @__PURE__ */ f(g, { children: e }), "Slottable");
function C(e) {
  return l.isValidElement(e) && e.type === h;
}
a(C, "isSlottable");
function E(e, r) {
  const n = { ...r };
  for (const t in r) {
    const o = e[t], i = r[t];
    /^on[A-Z]/.test(t) ? o && i ? n[t] = (...c) => {
      i(...c), o(...c);
    } : o && (n[t] = o) : t === "style" ? n[t] = { ...o, ...i } : t === "className" && (n[t] = [o, i].filter(Boolean).join(" "));
  }
  return { ...e, ...n };
}
a(E, "mergeProps");
function R(e) {
  var t, o;
  let r = (t = Object.getOwnPropertyDescriptor(e.props, "ref")) == null ? void 0 : t.get, n = r && "isReactWarning" in r && r.isReactWarning;
  return n ? e.ref : (r = (o = Object.getOwnPropertyDescriptor(e, "ref")) == null ? void 0 : o.get, n = r && "isReactWarning" in r && r.isReactWarning, n ? e.props.ref : e.props.ref || e.ref);
}
a(R, "getElementRef");
export {
  y as Slot,
  h as Slottable
};
