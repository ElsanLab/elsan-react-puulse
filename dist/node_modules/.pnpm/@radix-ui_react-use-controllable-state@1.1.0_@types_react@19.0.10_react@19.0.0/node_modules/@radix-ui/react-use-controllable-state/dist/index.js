var C = Object.defineProperty;
var r = (t, s) => C(t, "name", { value: s, configurable: !0 });
import * as u from "react";
import { useCallbackRef as i } from "../../../../../@radix-ui_react-use-callback-ref@1.1.0_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-use-callback-ref/dist/index.js";
function h({
  prop: t,
  defaultProp: s,
  onChange: c = /* @__PURE__ */ r(() => {
  }, "onChange")
}) {
  const [e, n] = m({ defaultProp: s, onChange: c }), o = t !== void 0, d = o ? t : e, a = i(c), v = u.useCallback(
    (l) => {
      if (o) {
        const f = typeof l == "function" ? l(t) : l;
        f !== t && a(f);
      } else
        n(l);
    },
    [o, t, n, a]
  );
  return [d, v];
}
r(h, "useControllableState");
function m({
  defaultProp: t,
  onChange: s
}) {
  const c = u.useState(t), [e] = c, n = u.useRef(e), o = i(s);
  return u.useEffect(() => {
    n.current !== e && (o(e), n.current = e);
  }, [e, n, o]), c;
}
r(m, "useUncontrolledState");
export {
  h as useControllableState
};
