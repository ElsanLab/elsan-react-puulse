var L = Object.defineProperty;
var d = (e, o) => L(e, "name", { value: o, configurable: !0 });
import * as i from "react";
import { composeEventHandlers as m } from "../../../../../@radix-ui_primitive@1.1.1/node_modules/@radix-ui/primitive/dist/index.js";
import { useComposedRefs as _ } from "../../../../../@radix-ui_react-compose-refs@1.1.1_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-compose-refs/dist/index.js";
import { createContextScope as $, createContext as B } from "../../../../../@radix-ui_react-context@1.1.1_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-context/dist/index.js";
import { useId as R } from "../../../../../@radix-ui_react-id@1.1.0_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-id/dist/index.js";
import { useControllableState as j } from "../../../../../@radix-ui_react-use-controllable-state@1.1.0_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-use-controllable-state/dist/index.js";
import { DismissableLayer as H } from "../../../../../@radix-ui_react-dismissable-layer@1.1.5_@types_react-dom@19.0.4_@types_react@19.0.10__@_4f2152dfff31b040d79630b612def16b/node_modules/@radix-ui/react-dismissable-layer/dist/index.js";
import { FocusScope as V } from "../../../../../@radix-ui_react-focus-scope@1.1.2_@types_react-dom@19.0.4_@types_react@19.0.10__@types__9fde1c1c2c170a64704d472582e3c0b0/node_modules/@radix-ui/react-focus-scope/dist/index.js";
import { Presence as O } from "../../../../../@radix-ui_react-presence@1.1.2_@types_react-dom@19.0.4_@types_react@19.0.10__@types_rea_4e66528287e1d18ded522b9e8aeb8e38/node_modules/@radix-ui/react-presence/dist/index.js";
import { Primitive as D } from "../../../../../@radix-ui_react-primitive@2.0.2_@types_react-dom@19.0.4_@types_react@19.0.10__@types_re_eba4716596d4f139c393e6187e0b8922/node_modules/@radix-ui/react-primitive/dist/index.js";
import { useFocusGuards as q } from "../../../../../@radix-ui_react-focus-guards@1.1.1_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-focus-guards/dist/index.js";
import K from "../../../../../react-remove-scroll@2.6.3_@types_react@19.0.10_react@19.0.0/node_modules/react-remove-scroll/dist/es2015/Combination.js";
import { hideOthers as U } from "../../../../../aria-hidden@1.2.4/node_modules/aria-hidden/dist/es2015/index.js";
import { Slot as Y } from "../../../../../@radix-ui_react-slot@1.1.2_@types_react@19.0.10_react@19.0.0/node_modules/@radix-ui/react-slot/dist/index.js";
import { jsx as s, jsxs as I, Fragment as y } from "react/jsx-runtime";
var E = "Dialog", [P, he] = $(E), [Z, u] = P(E), x = /* @__PURE__ */ d((e) => {
  const {
    __scopeDialog: o,
    children: a,
    open: r,
    defaultOpen: n,
    onOpenChange: t,
    modal: c = !0
  } = e, l = i.useRef(null), f = i.useRef(null), [p = !1, C] = j({
    prop: r,
    defaultProp: n,
    onChange: t
  });
  return /* @__PURE__ */ s(
    Z,
    {
      scope: o,
      triggerRef: l,
      contentRef: f,
      contentId: R(),
      titleId: R(),
      descriptionId: R(),
      open: p,
      onOpenChange: C,
      onOpenToggle: i.useCallback(() => C((G) => !G), [C]),
      modal: c,
      children: a
    }
  );
}, "Dialog");
x.displayName = E;
var A = "DialogTrigger", T = i.forwardRef(
  (e, o) => {
    const { __scopeDialog: a, ...r } = e, n = u(A, a), t = _(o, n.triggerRef);
    return /* @__PURE__ */ s(
      D.button,
      {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": n.open,
        "aria-controls": n.contentId,
        "data-state": N(n.open),
        ...r,
        ref: t,
        onClick: m(e.onClick, n.onOpenToggle)
      }
    );
  }
);
T.displayName = A;
var z = "DialogPortal", [Ne, b] = P(z, {
  forceMount: void 0
}), v = "DialogOverlay", J = i.forwardRef(
  (e, o) => {
    const a = b(v, e.__scopeDialog), { forceMount: r = a.forceMount, ...n } = e, t = u(v, e.__scopeDialog);
    return t.modal ? /* @__PURE__ */ s(O, { present: r || t.open, children: /* @__PURE__ */ s(Q, { ...n, ref: o }) }) : null;
  }
);
J.displayName = v;
var Q = i.forwardRef(
  (e, o) => {
    const { __scopeDialog: a, ...r } = e, n = u(v, a);
    return (
      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
      // ie. when `Overlay` and `Content` are siblings
      /* @__PURE__ */ s(K, { as: Y, allowPinchZoom: !0, shards: [n.contentRef], children: /* @__PURE__ */ s(
        D.div,
        {
          "data-state": N(n.open),
          ...r,
          ref: o,
          style: { pointerEvents: "auto", ...r.style }
        }
      ) })
    );
  }
), g = "DialogContent", X = i.forwardRef(
  (e, o) => {
    const a = b(g, e.__scopeDialog), { forceMount: r = a.forceMount, ...n } = e, t = u(g, e.__scopeDialog);
    return /* @__PURE__ */ s(O, { present: r || t.open, children: t.modal ? /* @__PURE__ */ s(ee, { ...n, ref: o }) : /* @__PURE__ */ s(te, { ...n, ref: o }) });
  }
);
X.displayName = g;
var ee = i.forwardRef(
  (e, o) => {
    const a = u(g, e.__scopeDialog), r = i.useRef(null), n = _(o, a.contentRef, r);
    return i.useEffect(() => {
      const t = r.current;
      if (t) return U(t);
    }, []), /* @__PURE__ */ s(
      M,
      {
        ...e,
        ref: n,
        trapFocus: a.open,
        disableOutsidePointerEvents: !0,
        onCloseAutoFocus: m(e.onCloseAutoFocus, (t) => {
          var c;
          t.preventDefault(), (c = a.triggerRef.current) == null || c.focus();
        }),
        onPointerDownOutside: m(e.onPointerDownOutside, (t) => {
          const c = t.detail.originalEvent, l = c.button === 0 && c.ctrlKey === !0;
          (c.button === 2 || l) && t.preventDefault();
        }),
        onFocusOutside: m(
          e.onFocusOutside,
          (t) => t.preventDefault()
        )
      }
    );
  }
), te = i.forwardRef(
  (e, o) => {
    const a = u(g, e.__scopeDialog), r = i.useRef(!1), n = i.useRef(!1);
    return /* @__PURE__ */ s(
      M,
      {
        ...e,
        ref: o,
        trapFocus: !1,
        disableOutsidePointerEvents: !1,
        onCloseAutoFocus: /* @__PURE__ */ d((t) => {
          var c, l;
          (c = e.onCloseAutoFocus) == null || c.call(e, t), t.defaultPrevented || (r.current || (l = a.triggerRef.current) == null || l.focus(), t.preventDefault()), r.current = !1, n.current = !1;
        }, "onCloseAutoFocus"),
        onInteractOutside: /* @__PURE__ */ d((t) => {
          var f, p;
          (f = e.onInteractOutside) == null || f.call(e, t), t.defaultPrevented || (r.current = !0, t.detail.originalEvent.type === "pointerdown" && (n.current = !0));
          const c = t.target;
          ((p = a.triggerRef.current) == null ? void 0 : p.contains(c)) && t.preventDefault(), t.detail.originalEvent.type === "focusin" && n.current && t.preventDefault();
        }, "onInteractOutside")
      }
    );
  }
), M = i.forwardRef(
  (e, o) => {
    const { __scopeDialog: a, trapFocus: r, onOpenAutoFocus: n, onCloseAutoFocus: t, ...c } = e, l = u(g, a), f = i.useRef(null), p = _(o, f);
    return q(), /* @__PURE__ */ I(y, { children: [
      /* @__PURE__ */ s(
        V,
        {
          asChild: !0,
          loop: !0,
          trapped: r,
          onMountAutoFocus: n,
          onUnmountAutoFocus: t,
          children: /* @__PURE__ */ s(
            H,
            {
              role: "dialog",
              id: l.contentId,
              "aria-describedby": l.descriptionId,
              "aria-labelledby": l.titleId,
              "data-state": N(l.open),
              ...c,
              ref: p,
              onDismiss: /* @__PURE__ */ d(() => l.onOpenChange(!1), "onDismiss")
            }
          )
        }
      ),
      /* @__PURE__ */ I(y, { children: [
        /* @__PURE__ */ s(re, { titleId: l.titleId }),
        /* @__PURE__ */ s(ie, { contentRef: f, descriptionId: l.descriptionId })
      ] })
    ] });
  }
), h = "DialogTitle", oe = i.forwardRef(
  (e, o) => {
    const { __scopeDialog: a, ...r } = e, n = u(h, a);
    return /* @__PURE__ */ s(D.h2, { id: n.titleId, ...r, ref: o });
  }
);
oe.displayName = h;
var w = "DialogDescription", ne = i.forwardRef(
  (e, o) => {
    const { __scopeDialog: a, ...r } = e, n = u(w, a);
    return /* @__PURE__ */ s(D.p, { id: n.descriptionId, ...r, ref: o });
  }
);
ne.displayName = w;
var F = "DialogClose", S = i.forwardRef(
  (e, o) => {
    const { __scopeDialog: a, ...r } = e, n = u(F, a);
    return /* @__PURE__ */ s(
      D.button,
      {
        type: "button",
        ...r,
        ref: o,
        onClick: m(e.onClick, () => n.onOpenChange(!1))
      }
    );
  }
);
S.displayName = F;
function N(e) {
  return e ? "open" : "closed";
}
d(N, "getState");
var W = "DialogTitleWarning", [Ie, k] = B(W, {
  contentName: g,
  titleName: h,
  docsSlug: "dialog"
}), re = /* @__PURE__ */ d(({ titleId: e }) => {
  const o = k(W), a = `\`${o.contentName}\` requires a \`${o.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${o.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${o.docsSlug}`;
  return i.useEffect(() => {
    e && (document.getElementById(e) || console.error(a));
  }, [a, e]), null;
}, "TitleWarning"), ae = "DialogDescriptionWarning", ie = /* @__PURE__ */ d(({ contentRef: e, descriptionId: o }) => {
  const r = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${k(ae).contentName}}.`;
  return i.useEffect(() => {
    var t;
    const n = (t = e.current) == null ? void 0 : t.getAttribute("aria-describedby");
    o && n && (document.getElementById(o) || console.warn(r));
  }, [r, e, o]), null;
}, "DescriptionWarning"), ye = x, Oe = T, Pe = S;
export {
  Pe as Close,
  x as Dialog,
  S as DialogClose,
  X as DialogContent,
  ne as DialogDescription,
  J as DialogOverlay,
  oe as DialogTitle,
  T as DialogTrigger,
  ye as Root,
  Oe as Trigger,
  Ie as WarningProvider,
  he as createDialogScope
};
