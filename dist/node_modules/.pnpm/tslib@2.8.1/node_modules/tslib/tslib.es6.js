var l = Object.defineProperty;
var p = (t, e) => l(t, "name", { value: e, configurable: !0 });
var c = /* @__PURE__ */ p(function() {
  return c = Object.assign || /* @__PURE__ */ p(function(e) {
    for (var n, r = 1, o = arguments.length; r < o; r++) {
      n = arguments[r];
      for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (e[a] = n[a]);
    }
    return e;
  }, "__assign"), c.apply(this, arguments);
}, "__assign");
function s(t, e) {
  var n = {};
  for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && e.indexOf(r) < 0 && (n[r] = t[r]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, r = Object.getOwnPropertySymbols(t); o < r.length; o++)
      e.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[o]) && (n[r[o]] = t[r[o]]);
  return n;
}
p(s, "__rest");
function f(t, e, n) {
  if (n || arguments.length === 2) for (var r = 0, o = e.length, a; r < o; r++)
    (a || !(r in e)) && (a || (a = Array.prototype.slice.call(e, 0, r)), a[r] = e[r]);
  return t.concat(a || Array.prototype.slice.call(e));
}
p(f, "__spreadArray");
export {
  c as __assign,
  s as __rest,
  f as __spreadArray
};
