var l = Object.defineProperty;
var u = (r, a) => l(r, "name", { value: a, configurable: !0 });
import { useState as n } from "react";
function i(r, a) {
  var e = n(function() {
    return {
      // value
      value: r,
      // last callback
      callback: a,
      // "memoized" public interface
      facade: {
        get current() {
          return e.value;
        },
        set current(t) {
          var c = e.value;
          c !== t && (e.value = t, e.callback(t, c));
        }
      }
    };
  })[0];
  return e.callback = a, e.facade;
}
u(i, "useCallbackRef");
export {
  i as useCallbackRef
};
