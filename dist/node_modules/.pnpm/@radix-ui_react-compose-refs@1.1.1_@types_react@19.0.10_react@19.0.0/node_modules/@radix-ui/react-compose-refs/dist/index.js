var i = Object.defineProperty;
var u = (n, t) => i(n, "name", { value: t, configurable: !0 });
import * as s from "react";
function f(n, t) {
  if (typeof n == "function")
    return n(t);
  n != null && (n.current = t);
}
u(f, "setRef");
function p(...n) {
  return (t) => {
    let c = !1;
    const l = n.map((e) => {
      const o = f(e, t);
      return !c && typeof o == "function" && (c = !0), o;
    });
    if (c)
      return () => {
        for (let e = 0; e < l.length; e++) {
          const o = l[e];
          typeof o == "function" ? o() : f(n[e], null);
        }
      };
  };
}
u(p, "composeRefs");
function a(...n) {
  return s.useCallback(p(...n), n);
}
u(a, "useComposedRefs");
export {
  p as composeRefs,
  a as useComposedRefs
};
